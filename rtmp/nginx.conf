worker_processes auto;
rtmp_auto_push on;
events {}
rtmp {
    server {
        listen 1935;
        listen [::]:1935 ipv6only=on;

# Notice how the application is called "live". This is
# why we use rtmp://localhost:1935/live as the server address.
        application live {
            # Live mode - One-to-many broadcasting
            live on;

# hls on - Starting converting RTMP stream.
# hls_path - Clips go here.
# hls_fragment - Size of stream segment to save.
# hls_playlist_length - Size of whole playlist. Modify
# depending on how much storage you're willing to set aside.
# On the client side, this means you can only look back a certain time.
            hls on;
            hls_path /tmp/hls;
            hls_fragment 3s;
            hls_playlist_length 20s;

# TESTING ENCRYPTION TESTING ENCRYPTION------------------------------------------------------------------------------------------------------------
            # Enables encryption. Off by default, AES-128 method is used to encrypt the whole HLS fragments.
            hls_keys on;

            # Directory where auto-generated keys are saved.
            # If directory doesn't exist, it's created in runtime.
            # By default, hls_path directory is used for key files but this isn't recommended. You should make your own key path.
            hls_key_path /tmp/keys; 

            # URL for file entries. Empty by default.
            # If empty, items have no prefix and keys are assumed to be at
            # the same location as the playlist.
            # hls_key_url https://example.com/keys/;
            # hls_key_url http://localhost:/keys/;
            hls_key_url http://localhost:8086/keys/;


            # Number of HLS fragments encrypted with the same key. 0 - Only 1 key is created
            # Default is 0.
            hls_fragments_per_key 2;



# TESTING ENCRYPTION TESTING ENCRYPTION------------------------------------------------------------------------------------------------------------

            record off;

# auth_server because it's the networking in the yml.
# No localhost, accessed through the other container. The stream
# and auth servers communicate through Docker compose.
# 8000 is the auth server port and /auth is the endpoint.

# When a new stream is published through RTMP, NGINX will
# first POST to auth, and accepts stream if a 200 status is returned.
# If it's anything else (e.g. 400, 500), reject stream.

# RTMP server will give stream key to this endpoint. Check if it
# matches with the real stream key and accept accordingly.
            on_publish http://auth_server_angular:8000/auth;
        }
    }
}

# Creating HTTP server. This will run alongside the RTMP server
# in the same NGINX container.
http {
    server {
        # It will be hosted on this port.
        listen 8080;

        #------------TESTING--------------------
        gzip on;
        gzip_http_version 1.1;
        gzip_disable      "MSIE [1-6]\.";
        gzip_min_length   256;
        gzip_vary         on;
        gzip_proxied      expired no-cache no-store private auth;
        gzip_types        text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_comp_level   9;
          #------------TESTING--------------------


        # # When you go to the root or localhost:/,
        # location / {
        #     # it will look into this "www" folder. This is where
        #     # the HTML will be stored. It will start from the rtmp folder.
        #     root /www;

        #     #--- TRYING BASIC AUTHENTICATION -------
        #     auth_basic "admin area";
        #     auth_basic_user_file /etc/nginx/.htpasswd;
        #     #--- TRYING BASIC AUTHENTICATION -------

        # }

         # When you go to the root or localhost:/,
        location / {
            # it will look into this "www" folder. This is where
            # the HTML will be stored. It will start from the rtmp folder.
            root /usr/share/nginx/html;

            try_files $uri $uri/ /index.html =404;
        }

        location /keys {
            root /tmp;

            add_header Access-Control-Allow-Origin *;
            # Don't cache the keys
            add_header Cache-Control no-cache;


        }

        # When you go to localhost:/hls
        location /hls {
            # Serve 2 different kinds of files. The "types"
            # directive tells you what type to assign to this file extension.
            # E.g. when we're serving m3u8 it will be an mpegurl type.
            types{
                # First, the playlist file.
                application/vnd.apple.mpegurl m3u8;
                # Then, the video "chunks"
                application/octet-stream ts/;
            }

            # Look inside the "tmp" folder.
            # Look up CORS for reference.
            root /tmp;
            # Don't cache the live stream.
            add_header Cache-Control no-cache;

            # To avoid issues with cross-domain HTTP requests (e.g. during development)
            # Tells the browser that any website can receive these video files.
            add_header Access-Control-Allow-Origin *;
        }
    } 
}